!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ANSI_FR	wh.c	24;"	d	file:
ANSI_X	wh.c	25;"	d	file:
CRC32C_SEED	wh.c	764;"	d	file:
KVBUCKET_NR	wh.c	1425;"	d	file:
META_UP_GAP_1	wh.c	2179;"	d	file:
META_UP_GAP_2	wh.c	2214;"	d	file:
PGSZ	wh.c	540;"	d	file:
QSBR_BITMAP_NR	wh.c	982;"	d	file:
QSBR_STATES_NR	wh.c	981;"	d	file:
RCU_COUNT_MASK	wh.c	837;"	d	file:
RCU_VALID_MASK	wh.c	838;"	d	file:
RCU_VALUE_MASK	wh.c	839;"	d	file:
RCU_VALUE_SHIFT	wh.c	840;"	d	file:
RWLOCK_WBIT	wh.c	134;"	d	file:
RWLOCK_WBIT	wh.c	222;"	d	file:
RWLOCK_WSHIFT	wh.c	133;"	d	file:
WH_BMNR	wh.c	1493;"	d	file:
WH_FO	wh.c	1491;"	d	file:
WH_KPN	wh.c	1485;"	d	file:
WH_KPN_MRG	wh.c	1488;"	d	file:
WH_MID	wh.c	1486;"	d	file:
_GNU_SOURCE	wh.c	6;"	d	file:
__buf	demo1.c	/^char * __buf = NULL;$/;"	v
__cpu_set_alloc	wh.c	/^__cpu_set_alloc(size_t * const size_out)$/;"	f	file:
__kv	demo1.c	/^struct kv * __kv = NULL;$/;"	v	typeref:struct:kv
__kv_compare_pp	wh.c	/^__kv_compare_pp(const void * const p1, const void * const p2)$/;"	f	file:
__kv_pattern	wh.c	/^__kv_pattern(const char c)$/;"	f	file:
__kvmap_entry_keycompare_vptr	wh.c	/^__kvmap_entry_keycompare_vptr(const void * const p1, const void * const p2)$/;"	f	file:
__kvmap_entry_pkey_comp	wh.c	/^__kvmap_entry_pkey_comp(const void * const p1, const void * const p2)$/;"	f	file:
__kvmap_entry_qsort	wh.c	/^__kvmap_entry_qsort(struct entry13 * const es, const size_t nr)$/;"	f	file:
__kvmap_mm_default	wh.c	/^static const struct kvmap_mm __kvmap_mm_default = {$/;"	v	typeref:struct:kvmap_mm	file:
__lcp16_aligned	wh.c	/^__lcp16_aligned(const void * const p1, const void * const p2)$/;"	f	file:
__mutexlock	wh.h	/^typedef struct __mutexlock {$/;"	s
__out	demo1.c	/^struct kv * __out = NULL;$/;"	v	typeref:struct:kv
__pages_alloc	wh.c	/^__pages_alloc(const size_t size, const int flags)$/;"	f	file:
__rwlock	wh.h	/^typedef struct __rwlock {$/;"	s
__signal_handler_wait_gdb	wh.c	/^__signal_handler_wait_gdb(const int sig, siginfo_t * const info, void * const context)$/;"	f	file:
__size	demo1.c	/^size_t __size = 0;$/;"	v
__spinlock	wh.h	/^typedef struct __spinlock {$/;"	s
af	wh.h	/^  kv_alloc_func af;$/;"	m	struct:kvmap_mm
anchor	wh.c	/^  struct kv * anchor;$/;"	m	struct:wormleaf	typeref:struct:wormleaf::kv	file:
ap	wh.h	/^  void * ap;$/;"	m	struct:kvmap_mm
au16	wh.c	/^typedef atomic_uint_least16_t   au16;$/;"	t	file:
au64	wh.c	/^typedef atomic_uint_least64_t   au64;$/;"	t	file:
bitmap	wh.c	/^  u64 bitmap[QSBR_BITMAP_NR];$/;"	m	struct:qsbr	file:
bitmap	wh.c	/^  u64 bitmap[WH_BMNR];$/;"	m	struct:wormmeta	file:
bitmin	wh.c	/^  u16 bitmin;$/;"	m	struct:wormmeta	file:
blk_head	wh.c	/^  struct slab_object * blk_head; \/\/ list of all blocks$/;"	m	struct:slab	typeref:struct:slab::slab_object	file:
blk_nr	wh.c	/^  u64 blk_nr; \/\/ number of blocks$/;"	m	struct:slab	file:
blk_size	wh.c	/^  u64 blk_size; \/\/ size of each memory block$/;"	m	struct:slab	file:
cpu_cfence	wh.c	/^cpu_cfence(void)$/;"	f
cpu_mfence	wh.c	/^cpu_mfence(void)$/;"	f
cpu_prefetchr	wh.c	/^cpu_prefetchr(const void * const ptr, const int hint)$/;"	f	file:
crc32c	wh.c	/^crc32c(const void * const ptr, size_t len)$/;"	f
crc32c_extend	wh.c	/^crc32c_extend(const u32 lo)$/;"	f	file:
crc32c_inc	wh.c	/^crc32c_inc(const u8 * buf, size_t nr, u32 crc)$/;"	f
crc32c_inc_short	wh.c	/^crc32c_inc_short(const u8 * buf, size_t nr, u32 crc)$/;"	f	file:
crc32c_inc_short_nz	wh.c	/^crc32c_inc_short_nz(const u8 * buf, size_t nr, u32 crc)$/;"	f	file:
crc32c_inc_x4	wh.c	/^crc32c_inc_x4(const u8 * buf, size_t nr, u32 crc)$/;"	f	file:
debug_assert	wh.c	/^debug_assert(const bool v)$/;"	f
debug_assert	wh.h	151;"	d
debug_backtrace	wh.c	/^debug_backtrace(void)$/;"	f
debug_break	wh.c	/^debug_break(void)$/;"	f
debug_catch_fatals	wh.c	/^debug_catch_fatals(void)$/;"	f	file:
debug_die	wh.c	/^debug_die(void)$/;"	f
debug_wait_gdb	wh.c	/^debug_wait_gdb(void)$/;"	f
e	wh.c	/^  struct entry13 e[KVBUCKET_NR];$/;"	m	struct:kvbucket	typeref:struct:kvbucket::entry13	file:
e1	wh.c	/^      u64 e1:16;$/;"	m	struct:entry13::__anon1::__anon2	file:
e3	wh.c	/^      u64 e3:48;$/;"	m	struct:entry13::__anon1::__anon2	file:
eh	wh.c	/^  struct entry13 eh[WH_KPN]; \/\/ sorted by hashes$/;"	m	struct:wormleaf	typeref:struct:wormleaf::entry13	file:
entry13	wh.c	/^struct entry13 {$/;"	s	file:
es	wh.c	/^  struct entry13 es[WH_KPN]; \/\/ sorted by keys$/;"	m	struct:wormleaf	typeref:struct:wormleaf::entry13	file:
hash	wh.c	/^  u64 hash;$/;"	m	struct:wormkref	file:
hash	wh.h	/^  u64 hash; \/\/ hashvalue of the key$/;"	m	struct:kv
hash32	wh.c	/^  u32 hash32;$/;"	m	struct:wormmeta	file:
hmap	wh.c	/^  struct wormhmap * hmap;$/;"	m	struct:wormhole	typeref:struct:wormhole::wormhmap	file:
hmap2	wh.c	/^  struct wormhmap hmap2[2];$/;"	m	struct:wormhole	typeref:struct:wormhole::wormhmap	file:
hmap_id	wh.c	/^  u32 hmap_id; \/\/ 0 or 1$/;"	m	struct:wormhmap	file:
key	wh.c	/^  const u8 * key;$/;"	m	struct:wormkref	file:
key_size	wh.c	/^key_size(const struct kv *const key)$/;"	f
key_size_align	wh.c	/^key_size_align(const struct kv *const key, const u64 align)$/;"	f
keyref	wh.c	/^  struct kv * keyref;$/;"	m	struct:wormmeta	typeref:struct:wormmeta::kv	file:
klen	wh.c	/^  u16 klen;$/;"	m	struct:wormmeta	file:
klen	wh.c	/^  u32 klen; \/\/ the original klen$/;"	m	struct:wormkref	file:
klen	wh.c	/^  u64 klen;$/;"	m	struct:wormleaf	file:
klen	wh.h	/^      u32 klen;$/;"	m	struct:kv::__anon6::__anon7
kv	wh.h	/^  u8 kv[];  \/\/ len(kv) == klen + vlen$/;"	m	struct:kv
kv	wh.h	/^struct kv {$/;"	s
kv_alloc_func	wh.h	/^typedef struct kv * (* kv_alloc_func)(const u64, void * const);$/;"	t	typeref:struct:kv_alloc_func
kv_alloc_malloc	wh.c	/^kv_alloc_malloc(const u64 size, void * const priv)$/;"	f
kv_compare_func	wh.h	/^typedef int  (*kv_compare_func)(const struct kv * const kv1, const struct kv * const kv2);$/;"	t
kv_create	wh.c	/^kv_create(const void * const key, const u32 klen, const void * const value, const u32 vlen)$/;"	f
kv_create_str	wh.c	/^kv_create_str(const char * const key, const char * const value)$/;"	f
kv_dup	wh.c	/^kv_dup(const struct kv * const kv)$/;"	f
kv_dup2	wh.c	/^kv_dup2(const struct kv * const from, struct kv * const to)$/;"	f
kv_dup2_key	wh.c	/^kv_dup2_key(const struct kv * const from, struct kv * const to)$/;"	f
kv_dup2_key_prefix	wh.c	/^kv_dup2_key_prefix(const struct kv * const from, struct kv * const to, const u64 plen)$/;"	f
kv_dup_key	wh.c	/^kv_dup_key(const struct kv * const kv)$/;"	f
kv_fullmatch	wh.c	/^kv_fullmatch(const struct kv * const kv1, const struct kv * const kv2)$/;"	f
kv_key_is_prefix	wh.c	/^kv_key_is_prefix(const struct kv * const p, const struct kv * const key)$/;"	f
kv_key_lcp	wh.c	/^kv_key_lcp(const struct kv * const key1, const struct kv * const key2)$/;"	f
kv_key_ptr	wh.c	/^kv_key_ptr(struct kv * const kv)$/;"	f
kv_key_ptr_const	wh.c	/^kv_key_ptr_const(const struct kv * const kv)$/;"	f
kv_keycompare	wh.c	/^kv_keycompare(const struct kv * const kv1, const struct kv * const kv2)$/;"	f
kv_keymatch	wh.c	/^kv_keymatch(const struct kv * const key1, const struct kv * const key2)$/;"	f
kv_print	wh.c	/^kv_print(const struct kv * const kv, const char * const cmd, FILE * const out)$/;"	f
kv_qsort	wh.c	/^kv_qsort(const struct kv ** const kvs, const size_t nr)$/;"	f
kv_refill	wh.c	/^kv_refill(struct kv * const kv, const void * const key, const u32 klen,$/;"	f
kv_refill_str	wh.c	/^kv_refill_str(struct kv * const kv, const char * const key, const char * const value)$/;"	f
kv_retire_free	wh.c	/^kv_retire_free(struct kv * const kv, void * const priv)$/;"	f
kv_retire_func	wh.h	/^typedef void (* kv_retire_func)(struct kv * const, void * const);$/;"	t
kv_size	wh.c	/^kv_size(const struct kv * const kv)$/;"	f
kv_size_align	wh.c	/^kv_size_align(const struct kv * const kv, const u64 align)$/;"	f
kv_update_hash	wh.c	/^kv_update_hash(struct kv * const kv)$/;"	f
kv_value_ptr	wh.c	/^kv_value_ptr(struct kv * const kv)$/;"	f
kv_value_ptr_const	wh.c	/^kv_value_ptr_const(const struct kv * const kv)$/;"	f
kvbucket	wh.c	/^struct kvbucket {$/;"	s	file:
kvlen	wh.h	/^    u64 kvlen;$/;"	m	union:kv::__anon6
kvmap_mm	wh.h	/^struct kvmap_mm {$/;"	s
kvmap_pkey	wh.c	/^kvmap_pkey(const u64 hash)$/;"	f	file:
kvmap_put_entry	wh.c	/^kvmap_put_entry(struct kvmap_mm * const mm, struct entry13 * const e, const struct kv * const kv)$/;"	f	file:
leaf	wh.c	/^  struct wormleaf * leaf;$/;"	m	struct:wormhole_iter	typeref:struct:wormhole_iter::wormleaf	file:
leaf0	wh.c	/^  struct wormleaf * leaf0; \/\/ usually not used$/;"	m	struct:wormhole	typeref:struct:wormhole::wormleaf	file:
leaflock	wh.c	/^  rwlock leaflock;$/;"	m	struct:wormleaf	file:
lmost	wh.c	/^  struct wormleaf * lmost;$/;"	m	struct:wormmeta	typeref:struct:wormmeta::wormleaf	file:
lock	wh.c	/^  mutexlock lock;$/;"	m	struct:qsbr	file:
lock	wh.c	/^  spinlock lock;$/;"	m	struct:slab	file:
lock	wh.h	/^    pthread_mutex_t lock;$/;"	m	union:__mutexlock::__anon4
main	demo1.c	/^main(int argc, char ** argv)$/;"	f
map	wh.c	/^  struct wormhole * map;$/;"	m	struct:wormhmap	typeref:struct:wormhmap::wormhole	file:
map	wh.c	/^  struct wormhole * map;$/;"	m	struct:wormref	typeref:struct:wormref::wormhole	file:
mask	wh.c	/^  u64 mask;$/;"	m	struct:rcu	file:
mask	wh.c	/^  u64 mask;$/;"	m	struct:wormhmap	file:
maxplen	wh.c	/^  u32 maxplen;$/;"	m	struct:wormhmap	file:
metalock	wh.c	/^  rwlock metalock;$/;"	m	struct:wormhole	file:
mm	wh.c	/^  struct kvmap_mm mm;$/;"	m	struct:wormhole	typeref:struct:wormhole::kvmap_mm	file:
mutexlock	wh.h	/^} mutexlock;$/;"	t	typeref:struct:__mutexlock
mutexlock_init	wh.c	/^mutexlock_init(mutexlock * const lock)$/;"	f
mutexlock_lock	wh.c	/^mutexlock_lock(mutexlock * const lock)$/;"	f
mutexlock_trylock	wh.c	/^mutexlock_trylock(mutexlock * const lock)$/;"	f
mutexlock_unlock	wh.c	/^mutexlock_unlock(mutexlock * const lock)$/;"	f
next	wh.c	/^  struct slab_object * next;$/;"	m	struct:slab_object	typeref:struct:slab_object::slab_object	file:
next	wh.c	/^  struct wormleaf * next; \/\/ next leaf$/;"	m	struct:wormleaf	typeref:struct:wormleaf::wormleaf	file:
next_id	wh.c	/^  u32 next_id;$/;"	m	struct:wormhole_iter	file:
nodes	wh.c	/^  struct rcu_node nodes[];$/;"	m	struct:rcu	typeref:struct:rcu::rcu_node	file:
nr	wh.c	/^  u64 nr;$/;"	m	struct:rcu	file:
nr_alloc	wh.c	/^  u64 nr_alloc; \/\/ number of objects in use$/;"	m	struct:slab	file:
nr_keys	wh.c	/^  u64 nr_keys;$/;"	m	struct:wormleaf	file:
nr_sorted	wh.c	/^  u64 nr_sorted;$/;"	m	struct:wormleaf	file:
obj_head	wh.c	/^  struct slab_object * obj_head;$/;"	m	struct:slab	typeref:struct:slab::slab_object	file:
obj_size	wh.c	/^  u64 obj_size;$/;"	m	struct:slab	file:
padding	wh.c	/^  u64 padding[6];$/;"	m	struct:rcu	file:
padding	wh.h	/^    u64 padding;$/;"	m	union:__rwlock::__anon5
padding	wh.h	/^    u64 padding;$/;"	m	union:__spinlock::__anon3
padding	wh.h	/^    u64 padding[8];$/;"	m	union:__mutexlock::__anon4
padding0	wh.c	/^  u64 padding0[6];$/;"	m	struct:wormhole	file:
padding1	wh.c	/^  u64 padding1[7];$/;"	m	struct:wormhole	file:
pages_alloc_1gb	wh.c	/^pages_alloc_1gb(const size_t nr_1gb)$/;"	f
pages_alloc_2mb	wh.c	/^pages_alloc_2mb(const size_t nr_2mb)$/;"	f
pages_alloc_4kb	wh.c	/^pages_alloc_4kb(const size_t nr_4kb)$/;"	f
pages_alloc_best	wh.c	/^pages_alloc_best(const size_t size, const bool try_1gb, u64 * const size_out)$/;"	f
pages_unmap	wh.c	/^pages_unmap(void * const ptr, const size_t size)$/;"	f
plen	wh.c	/^  u32 plen; \/\/ prefix length; plen <= klen$/;"	m	struct:wormkref	file:
pmap	wh.c	/^  struct kvbucket * pmap;$/;"	m	struct:wormhmap	typeref:struct:wormhmap::kvbucket	file:
prev	wh.c	/^  struct wormleaf * prev; \/\/ prev leaf$/;"	m	struct:wormleaf	typeref:struct:wormleaf::wormleaf	file:
process_affinity_core_count	wh.c	/^process_affinity_core_count(void)$/;"	f
process_affinity_core_list	wh.c	/^process_affinity_core_list(const u64 max, u64 * const cores)$/;"	f
process_cpu_time_usec	wh.c	/^process_cpu_time_usec(void)$/;"	f
process_get_rss	wh.c	/^process_get_rss(void)$/;"	f
psize	wh.c	/^  u64 psize;$/;"	m	struct:wormhmap	file:
ptr_to_u64	wh.c	/^ptr_to_u64(const void * const ptr)$/;"	f	file:
ptrs	wh.c	/^  u64 * ptrs[QSBR_STATES_NR];$/;"	m	struct:qsbr	file:
qsbr	wh.c	/^  struct qsbr * qsbr;$/;"	m	struct:wormhole	typeref:struct:wormhole::qsbr	file:
qsbr	wh.c	/^struct qsbr {$/;"	s	file:
qsbr_create	wh.c	/^qsbr_create(void)$/;"	f	file:
qsbr_destroy	wh.c	/^qsbr_destroy(struct qsbr * const q)$/;"	f	file:
qsbr_register	wh.c	/^qsbr_register(struct qsbr * const q, u64 * const ptr)$/;"	f	file:
qsbr_unregister	wh.c	/^qsbr_unregister(struct qsbr * const q, u64 * const ptr)$/;"	f	file:
qsbr_wait	wh.c	/^qsbr_wait(struct qsbr * const q, const u64 target)$/;"	f	file:
qstate	wh.c	/^  u64 qstate;$/;"	m	struct:wormref	file:
rcu	wh.c	/^struct rcu {$/;"	s	file:
rcu_create	wh.c	/^rcu_create(const u64 nr)$/;"	f
rcu_init	wh.c	/^rcu_init(struct rcu * const rcu, const u64 nr)$/;"	f
rcu_node	wh.c	/^struct rcu_node {$/;"	s	file:
rcu_node_create	wh.c	/^rcu_node_create(void)$/;"	f
rcu_node_init	wh.c	/^rcu_node_init(struct rcu_node * const node)$/;"	f
rcu_node_ref	wh.c	/^rcu_node_ref(struct rcu_node * const node)$/;"	f
rcu_node_unref	wh.c	/^rcu_node_unref(struct rcu_node * const node, void * const ptr)$/;"	f
rcu_node_update	wh.c	/^rcu_node_update(struct rcu_node * const node, void * const ptr)$/;"	f
rcu_ref	wh.c	/^rcu_ref(struct rcu * const rcu, const u64 magic)$/;"	f
rcu_unref	wh.c	/^rcu_unref(struct rcu * const rcu, void * const ptr, const u64 magic)$/;"	f
rcu_update	wh.c	/^rcu_update(struct rcu * const rcu, void * const ptr)$/;"	f
rdtsc	wh.c	/^rdtsc(void)$/;"	f
ref	wh.c	/^  struct wormref * ref;$/;"	m	struct:wormhole_iter	typeref:struct:wormhole_iter::wormref	file:
refcnt	wh.h	/^        u32 refcnt;$/;"	m	union:kv::__anon6::__anon7::__anon8
rf	wh.h	/^  kv_retire_func rf;$/;"	m	struct:kvmap_mm
rmost	wh.c	/^  struct wormleaf * rmost;$/;"	m	struct:wormmeta	typeref:struct:wormmeta::wormleaf	file:
rp	wh.h	/^  void * rp;$/;"	m	struct:kvmap_mm
rwlock	wh.h	/^} rwlock;$/;"	t	typeref:struct:__rwlock
rwlock_init	wh.c	/^rwlock_init(rwlock * const lock)$/;"	f
rwlock_lock_read	wh.c	/^rwlock_lock_read(rwlock * const lock)$/;"	f
rwlock_lock_write	wh.c	/^rwlock_lock_write(rwlock * const lock)$/;"	f
rwlock_trylock_read	wh.c	/^rwlock_trylock_read(rwlock * const lock)$/;"	f
rwlock_trylock_read_nr	wh.c	/^rwlock_trylock_read_nr(rwlock * const lock, u64 nr)$/;"	f
rwlock_trylock_write	wh.c	/^rwlock_trylock_write(rwlock * const lock)$/;"	f
rwlock_trylock_write_nr	wh.c	/^rwlock_trylock_write_nr(rwlock * const lock, u64 nr)$/;"	f
rwlock_unlock_read	wh.c	/^rwlock_unlock_read(rwlock * const lock)$/;"	f
rwlock_unlock_write	wh.c	/^rwlock_unlock_write(rwlock * const lock)$/;"	f
scan_trace	demo1.c	/^scan_trace(FILE * const input)$/;"	f	file:
slab	wh.c	/^struct slab {$/;"	s	file:
slab_alloc	wh.c	/^slab_alloc(struct slab * const slab)$/;"	f
slab_alloc_unsafe	wh.c	/^slab_alloc_unsafe(struct slab * const slab)$/;"	f
slab_create	wh.c	/^slab_create(const u64 obj_size, const u64 blk_size)$/;"	f
slab_destroy	wh.c	/^slab_destroy(struct slab * const slab)$/;"	f
slab_expand	wh.c	/^slab_expand(struct slab * const slab)$/;"	f	file:
slab_free	wh.c	/^slab_free(struct slab * const slab, void * const ptr)$/;"	f
slab_free_unsafe	wh.c	/^slab_free_unsafe(struct slab * const slab, void * const ptr)$/;"	f
slab_leaf	wh.c	/^  struct slab * slab_leaf;$/;"	m	struct:wormhole	typeref:struct:wormhole::slab	file:
slab_meta	wh.c	/^  struct slab * slab_meta[2];$/;"	m	struct:wormhole	typeref:struct:wormhole::slab	file:
slab_object	wh.c	/^struct slab_object {$/;"	s	file:
spinlock	wh.h	/^} spinlock;$/;"	t	typeref:struct:__spinlock
spinlock_init	wh.c	/^spinlock_init(spinlock * const lock)$/;"	f
spinlock_lock	wh.c	/^spinlock_lock(spinlock * const lock)$/;"	f
spinlock_trylock	wh.c	/^spinlock_trylock(spinlock * const lock)$/;"	f
spinlock_unlock	wh.c	/^spinlock_unlock(spinlock * const lock)$/;"	f
t	wh.c	/^  u16 t[KVBUCKET_NR];$/;"	m	struct:wormslot	file:
target	wh.c	/^  u64 target;$/;"	m	struct:qsbr	file:
thread_create_at	wh.c	/^thread_create_at(const u64 cpu, pthread_t * const thread, void *(*start_routine) (void *), void * const arg)$/;"	f
thread_fork_join	wh.c	/^thread_fork_join(const u64 nr, void *(*func) (void *), void * const arg)$/;"	f
thread_fork_join_private	wh.c	/^thread_fork_join_private(const u64 nr, void *(*func) (void *), void * const * const argv)$/;"	f
thread_get_core	wh.c	/^thread_get_core(void)$/;"	f
thread_set_affinity	wh.c	/^thread_set_affinity(const u64 cpu)$/;"	f
time_diff_nsec	wh.c	/^time_diff_nsec(const u64 last)$/;"	f
time_diff_sec	wh.c	/^time_diff_sec(const double last)$/;"	f
time_nsec	wh.c	/^time_nsec(void)$/;"	f
time_sec	wh.c	/^time_sec(void)$/;"	f
timespec_diff	wh.c	/^timespec_diff(const struct timespec t0, const struct timespec t1)$/;"	f
u16	wh.h	/^typedef uint_least16_t          u16;$/;"	t
u32	wh.h	/^typedef uint_least32_t          u32;$/;"	t
u64	wh.h	/^typedef uint_least64_t          u64;$/;"	t
u64_to_ptr	wh.c	/^u64_to_ptr(const u64 v)$/;"	f	file:
u8	wh.h	/^typedef uint_least8_t           u8;$/;"	t
v64	wh.c	/^    u64 v64;$/;"	m	union:entry13::__anon1	file:
var	wh.h	/^    u16 var;$/;"	m	union:__rwlock::__anon5
var	wh.h	/^    u16 var;$/;"	m	union:__spinlock::__anon3
version	wh.c	/^  u64 version;$/;"	m	struct:wormhmap	file:
version	wh.c	/^  u64 version;$/;"	m	struct:wormleaf	file:
vlen	wh.h	/^        u32 vlen;$/;"	m	union:kv::__anon6::__anon7::__anon8
wh_del	demo1.c	/^wh_del(struct wormref * const ref, FILE * input)$/;"	f	file:
wh_get	demo1.c	/^wh_get(struct wormref * const ref, FILE * input)$/;"	f	file:
wh_iter	demo1.c	/^wh_iter(struct wormref * const ref, FILE * input)$/;"	f	file:
wh_probe	demo1.c	/^wh_probe(struct wormref * const ref, FILE * input)$/;"	f	file:
wh_set	demo1.c	/^wh_set(struct wormref * const ref, FILE * input)$/;"	f	file:
wmap	wh.c	/^  struct wormslot * wmap;$/;"	m	struct:wormhmap	typeref:struct:wormhmap::wormslot	file:
wormhmap	wh.c	/^struct wormhmap {$/;"	s	file:
wormhole	wh.c	/^struct wormhole {$/;"	s	file:
wormhole_alloc_akey	wh.c	/^wormhole_alloc_akey(const size_t klen)$/;"	f	file:
wormhole_alloc_kv	wh.c	/^wormhole_alloc_kv(struct wormhole * const map, const size_t klen, const size_t vlen)$/;"	f	file:
wormhole_alloc_leaf	wh.c	/^wormhole_alloc_leaf(struct wormhole * const map, struct wormleaf * const prev,$/;"	f	file:
wormhole_alloc_meta	wh.c	/^wormhole_alloc_meta(struct slab * const slab, struct wormleaf * const lrmost,$/;"	f	file:
wormhole_alloc_meta_keyref	wh.c	/^wormhole_alloc_meta_keyref(struct slab * const slab, struct wormleaf * const lrmost,$/;"	f	file:
wormhole_alloc_mkey	wh.c	/^wormhole_alloc_mkey(const size_t klen)$/;"	f	file:
wormhole_clean	wh.c	/^wormhole_clean(struct wormhole * const map)$/;"	f
wormhole_clean1	wh.c	/^wormhole_clean1(struct wormhole * const map)$/;"	f	file:
wormhole_count_leaf	wh.c	/^wormhole_count_leaf(struct wormhole * const map, const bool kv_node)$/;"	f	file:
wormhole_count_meta	wh.c	/^wormhole_count_meta(struct wormhmap * const hmap, const bool sizenr)$/;"	f	file:
wormhole_count_meta_rec	wh.c	/^wormhole_count_meta_rec(struct wormhmap * const hmap, struct kv * const pbuf, const bool sizenr)$/;"	f	file:
wormhole_create	wh.c	/^wormhole_create(const struct kvmap_mm * const mm)$/;"	f
wormhole_create_leaf0	wh.c	/^wormhole_create_leaf0(struct wormhole * const map)$/;"	f	file:
wormhole_del	wh.c	/^wormhole_del(struct wormref * const ref, const struct kv * const key)$/;"	f
wormhole_del_unsafe	wh.c	/^wormhole_del_unsafe(struct wormhole * const map, const struct kv * const key)$/;"	f
wormhole_destroy	wh.c	/^wormhole_destroy(struct wormhole * const map)$/;"	f
wormhole_force_merge	wh.c	/^wormhole_force_merge(struct wormref * const ref, struct wormleaf * const leaf)$/;"	f	file:
wormhole_fprint	wh.c	/^wormhole_fprint(struct wormhole * const map, FILE * const out)$/;"	f
wormhole_free_meta	wh.c	/^wormhole_free_meta(struct slab * const slab, struct wormmeta * const meta)$/;"	f	file:
wormhole_get	wh.c	/^wormhole_get(struct wormref * const ref, const struct kv * const key, struct kv * const out)$/;"	f
wormhole_get_unsafe	wh.c	/^wormhole_get_unsafe(struct wormhole * const map, const struct kv * const key, struct kv * const out)$/;"	f
wormhole_hmap_count_entry	wh.c	/^wormhole_hmap_count_entry(const struct wormhmap * const hmap, const u64 mid)$/;"	f	file:
wormhole_hmap_cuckoo	wh.c	/^wormhole_hmap_cuckoo(struct wormhmap * const hmap, const u64 mid0,$/;"	f	file:
wormhole_hmap_del	wh.c	/^wormhole_hmap_del(struct wormhmap * const hmap, const struct kv * const key)$/;"	f	file:
wormhole_hmap_del_slot	wh.c	/^wormhole_hmap_del_slot(struct wormhmap * const hmap, const u64 mid,$/;"	f	file:
wormhole_hmap_expand	wh.c	/^wormhole_hmap_expand(struct wormhmap * const hmap)$/;"	f	file:
wormhole_hmap_get	wh.c	/^wormhole_hmap_get(const struct wormhmap * const hmap, const struct kv * const key)$/;"	f	file:
wormhole_hmap_get_kref	wh.c	/^wormhole_hmap_get_kref(const struct wormhmap * const hmap, const struct wormkref * const ref)$/;"	f	file:
wormhole_hmap_get_kref1	wh.c	/^wormhole_hmap_get_kref1(const struct wormhmap * const hmap, const struct wormkref * const ref, const u32 cid)$/;"	f	file:
wormhole_hmap_get_kref1_slot	wh.c	/^wormhole_hmap_get_kref1_slot(const struct wormhmap * const hmap, const u64 mid, const __m128i skey,$/;"	f	file:
wormhole_hmap_get_kref_slot	wh.c	/^wormhole_hmap_get_kref_slot(const struct wormhmap * const hmap, const u64 mid, const __m128i skey,$/;"	f	file:
wormhole_hmap_get_slot	wh.c	/^wormhole_hmap_get_slot(const struct wormhmap * const hmap, const u64 mid, const __m128i skey,$/;"	f	file:
wormhole_hmap_init	wh.c	/^wormhole_hmap_init(struct wormhmap * const hmap, struct wormhole * const map, const u64 i)$/;"	f	file:
wormhole_hmap_peek	wh.c	/^wormhole_hmap_peek(const struct wormhmap * const hmap, const u64 hash)$/;"	f	file:
wormhole_hmap_peek_slot	wh.c	/^wormhole_hmap_peek_slot(const struct wormslot * const s, const __m128i skey)$/;"	f	file:
wormhole_hmap_set	wh.c	/^wormhole_hmap_set(struct wormhmap * const hmap, const struct wormmeta * const meta)$/;"	f	file:
wormhole_hmap_sibling	wh.c	/^wormhole_hmap_sibling(struct wormhole * const map, struct wormhmap * const hmap0)$/;"	f	file:
wormhole_hmap_skey	wh.c	/^wormhole_hmap_skey(const u16 pkey)$/;"	f	file:
wormhole_hmap_squeeze	wh.c	/^wormhole_hmap_squeeze(const struct wormhmap * const hmap)$/;"	f	file:
wormhole_hmap_stat	wh.c	/^wormhole_hmap_stat(struct wormhmap * const hmap, FILE * const out)$/;"	f
wormhole_iter	wh.c	/^struct wormhole_iter {$/;"	s	file:
wormhole_iter_create	wh.c	/^wormhole_iter_create(struct wormref * const ref)$/;"	f
wormhole_iter_destroy	wh.c	/^wormhole_iter_destroy(struct wormhole_iter * const iter)$/;"	f
wormhole_iter_next	wh.c	/^wormhole_iter_next(struct wormhole_iter * const iter, struct kv * const out)$/;"	f
wormhole_iter_seek	wh.c	/^wormhole_iter_seek(struct wormhole_iter * const iter, const struct kv * const key)$/;"	f
wormhole_jump_leaf	wh.c	/^wormhole_jump_leaf(const struct wormhmap * const hmap, const struct kv * const key)$/;"	f	file:
wormhole_jump_leaf_read	wh.c	/^wormhole_jump_leaf_read(struct wormref * const ref, const struct kv * const key)$/;"	f	file:
wormhole_jump_leaf_write	wh.c	/^wormhole_jump_leaf_write(struct wormref * const ref, const struct kv * const key)$/;"	f	file:
wormhole_key_meta_match	wh.c	/^wormhole_key_meta_match(const struct kv * const key, const struct wormmeta * const meta)$/;"	f	file:
wormhole_kref1_meta_match	wh.c	/^wormhole_kref1_meta_match(const struct wormkref * const ref, const struct wormmeta * const meta,$/;"	f	file:
wormhole_kref_inc_long	wh.c	/^wormhole_kref_inc_long(struct wormkref * const ref, const u32 plen, const u32 seed, const u32 slen)$/;"	f	file:
wormhole_kref_inc_short_nz	wh.c	/^wormhole_kref_inc_short_nz(struct wormkref * const ref, const u32 plen, const u32 seed, const u32 slen)$/;"	f	file:
wormhole_kref_inc_x4	wh.c	/^wormhole_kref_inc_x4(struct wormkref * const ref, const u32 plen, const u32 seed, const u32 slen)$/;"	f	file:
wormhole_kref_meta_match	wh.c	/^wormhole_kref_meta_match(const struct wormkref * const ref, const struct wormmeta * const meta)$/;"	f	file:
wormhole_leaf_bisect_hash	wh.c	/^wormhole_leaf_bisect_hash(const struct wormleaf * const leaf, const u64 pkey)$/;"	f	file:
wormhole_leaf_bisect_sorted	wh.c	/^wormhole_leaf_bisect_sorted(const struct wormleaf * const leaf, const struct kv * const key)$/;"	f	file:
wormhole_leaf_del_one	wh.c	/^wormhole_leaf_del_one(struct wormhole * const map, struct wormleaf * const leaf, const u64 ih)$/;"	f	file:
wormhole_leaf_match	wh.c	/^wormhole_leaf_match(const struct wormleaf * const leaf, const struct kv * const key)$/;"	f	file:
wormhole_leaf_seek_hash	wh.c	/^wormhole_leaf_seek_hash(const struct wormleaf * const leaf, const struct kv * const key,$/;"	f	file:
wormhole_leaf_sort_m2	wh.c	/^wormhole_leaf_sort_m2(struct entry13 * const es, const u64 n1, const u64 n2)$/;"	f	file:
wormhole_leaf_sync_hash	wh.c	/^wormhole_leaf_sync_hash(struct wormleaf * const leaf)$/;"	f	file:
wormhole_leaf_sync_sorted	wh.c	/^wormhole_leaf_sync_sorted(struct wormleaf * const leaf)$/;"	f	file:
wormhole_merge_leaf_move	wh.c	/^wormhole_merge_leaf_move(struct wormleaf * const leaf1, struct wormleaf * const leaf2)$/;"	f	file:
wormhole_merge_meta	wh.c	/^wormhole_merge_meta(struct wormhmap * const hmap, struct wormleaf * const leaf)$/;"	f	file:
wormhole_merge_ref	wh.c	/^wormhole_merge_ref(struct wormref * const ref, struct wormleaf * const leaf1, struct wormleaf * const leaf2)$/;"	f	file:
wormhole_merge_unsafe	wh.c	/^wormhole_merge_unsafe(struct wormhole * const map, struct wormleaf * const leaf1, struct wormleaf * const leaf2)$/;"	f	file:
wormhole_meta_bm_clear	wh.c	/^wormhole_meta_bm_clear(struct wormmeta * const meta, const u32 id)$/;"	f	file:
wormhole_meta_bm_gt	wh.c	/^wormhole_meta_bm_gt(const struct wormmeta * const meta, const u32 id0)$/;"	f	file:
wormhole_meta_bm_lt	wh.c	/^wormhole_meta_bm_lt(const struct wormmeta * const meta, const u32 id0)$/;"	f	file:
wormhole_meta_bm_set	wh.c	/^wormhole_meta_bm_set(struct wormmeta * const meta, const u32 id)$/;"	f	file:
wormhole_meta_bm_test	wh.c	/^wormhole_meta_bm_test(const struct wormmeta * const meta, const u32 id)$/;"	f	file:
wormhole_meta_down	wh.c	/^wormhole_meta_down(const struct wormhmap * const hmap, const struct wormkref * const ref, const struct wormmeta * const meta)$/;"	f	file:
wormhole_meta_up	wh.c	/^wormhole_meta_up(const struct wormhmap * const hmap, struct wormkref * const ref)$/;"	f	file:
wormhole_prefix	wh.c	/^wormhole_prefix(struct kv * const prefix, const u32 klen)$/;"	f	file:
wormhole_prefix_inc_long	wh.c	/^wormhole_prefix_inc_long(struct kv * const prefix, const u32 klen)$/;"	f	file:
wormhole_prefix_inc_short	wh.c	/^wormhole_prefix_inc_short(struct kv * const prefix, const u32 klen)$/;"	f	file:
wormhole_probe	wh.c	/^wormhole_probe(struct wormref * const ref, const struct kv * const key)$/;"	f
wormhole_probe_unsafe	wh.c	/^wormhole_probe_unsafe(struct wormhole * const map, const struct kv * const key)$/;"	f
wormhole_ref	wh.c	/^wormhole_ref(struct wormhole * const map)$/;"	f
wormhole_set	wh.c	/^wormhole_set(struct wormref * const ref, const struct kv * const kv0)$/;"	f
wormhole_set_insert	wh.c	/^wormhole_set_insert(struct wormleaf * const leaf, const u64 ii, const struct kv * const new, const u64 pkey)$/;"	f	file:
wormhole_set_unsafe	wh.c	/^wormhole_set_unsafe(struct wormhole * const map, const struct kv * const kv0)$/;"	f
wormhole_set_update	wh.c	/^wormhole_set_update(struct wormhole * const map, struct wormleaf * const leaf, const u64 im, const struct kv * const new)$/;"	f	file:
wormhole_split_anchor	wh.c	/^wormhole_split_anchor(struct wormleaf * const leaf1, struct wormleaf * const leaf2)$/;"	f	file:
wormhole_split_can_cut	wh.c	/^wormhole_split_can_cut(const struct entry13 * const es, const u64 i1, const u64 i2)$/;"	f	file:
wormhole_split_can_cut_alen	wh.c	/^wormhole_split_can_cut_alen(const struct entry13 * const es, const u64 i1, const u64 i2, const u32 alen)$/;"	f	file:
wormhole_split_cut	wh.c	/^wormhole_split_cut(const struct wormleaf * const leaf)$/;"	f	file:
wormhole_split_cut_alen	wh.c	/^wormhole_split_cut_alen(const struct entry13 * const es, const u64 i1, const u64 i2)$/;"	f	file:
wormhole_split_insert	wh.c	/^wormhole_split_insert(struct wormref * const ref, struct wormleaf * const leaf1,$/;"	f	file:
wormhole_split_insert_unsafe	wh.c	/^wormhole_split_insert_unsafe(struct wormhole * const map, struct wormleaf * const leaf1,$/;"	f	file:
wormhole_split_leaf	wh.c	/^wormhole_split_leaf(struct wormhole * const map, struct wormleaf * const leaf1, const u64 cut)$/;"	f	file:
wormhole_split_leaf_move	wh.c	/^wormhole_split_leaf_move(struct wormleaf * const leaf1, struct wormleaf * const leaf2, const u64 cut)$/;"	f	file:
wormhole_split_meta_extend	wh.c	/^wormhole_split_meta_extend(struct wormhmap * const hmap, struct wormmeta * const meta,$/;"	f	file:
wormhole_split_meta_hmap	wh.c	/^wormhole_split_meta_hmap(struct wormhmap * const hmap, struct wormleaf * const leaf,$/;"	f	file:
wormhole_split_meta_new	wh.c	/^wormhole_split_meta_new(struct wormhmap * const hmap, struct kv * const pbuf,$/;"	f	file:
wormhole_split_meta_one	wh.c	/^wormhole_split_meta_one(struct wormhmap * const hmap, struct kv * const pbuf,$/;"	f	file:
wormhole_split_meta_ref	wh.c	/^wormhole_split_meta_ref(struct wormref * const ref, struct wormleaf * const leaf2)$/;"	f	file:
wormhole_split_meta_unsafe	wh.c	/^wormhole_split_meta_unsafe(struct wormhole * const map, struct wormleaf * const leaf2)$/;"	f	file:
wormhole_try_merge	wh.c	/^wormhole_try_merge(struct wormref * const ref, struct wormleaf * const leaf)$/;"	f	file:
wormhole_unref	wh.c	/^wormhole_unref(struct wormref * const ref)$/;"	f
wormkref	wh.c	/^struct wormkref { \/\/ reference to a key$/;"	s	file:
wormleaf	wh.c	/^struct wormleaf {$/;"	s	file:
wormmeta	wh.c	/^struct wormmeta {$/;"	s	file:
wormref	wh.c	/^struct wormref {$/;"	s	file:
wormslot	wh.c	/^struct wormslot {$/;"	s	file:
wsize	wh.c	/^  u64 wsize;$/;"	m	struct:wormhmap	file:
x	wh.c	/^  au64 x[8];$/;"	m	struct:rcu_node	file:
xalloc	wh.c	/^xalloc(const u64 align, const u64 size)$/;"	f
yalloc	wh.c	/^yalloc(const u64 size)$/;"	f
